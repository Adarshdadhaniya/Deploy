



// Existing JS for large screens
document.addEventListener('DOMContentLoaded', () => {
  const faqAccordions = document.querySelectorAll('.faq1');
  const faqImages = document.querySelectorAll('.faqimage img');

  // Display the first image by default
  if (faqImages[0]) {
      faqImages[0].classList.add('visible');
  }

  faqAccordions.forEach((faqque, index) => {
      const questionWrapper = faqque.querySelector('.faqques');
      const answerWrapper = faqque.querySelector('.faqans');
      const plusIcon = faqque.querySelector(".plus-icon");

      questionWrapper.addEventListener('click', () => {
          // Close all other FAQs and hide all images
          faqAccordions.forEach((otherFaq, otherIndex) => {
              if (otherFaq !== faqque) {
                  otherFaq.classList.remove('active'); // Remove active class from other faq1
                  otherFaq.querySelector('.faqans').classList.remove('active');
                  otherFaq.querySelector('.plus-icon').classList.remove('minus-icon');

                  if (faqImages[otherIndex]) {
                      faqImages[otherIndex].classList.remove('visible'); // Remove visible class
                  }
              }
          });

          // Toggle the selected FAQ's active state
          const isActive = faqque.classList.contains('active');
          faqque.classList.toggle('active', !isActive);
          answerWrapper.classList.toggle('active', !isActive);
          plusIcon.classList.toggle('minus-icon', !isActive);

          // Show the corresponding image if it exists
          if (faqImages[index]) {
              if (!isActive) {
                  faqImages[index].classList.add('visible'); // Add visible class
              } else {
                  faqImages[index].classList.remove('visible'); // Remove visible class
              }
          }

          // Check if any image is visible; if not, display the first image by default
          const anyImageVisible = Array.from(faqImages).some(img => img.classList.contains('visible'));
          if (!anyImageVisible && faqImages[0]) {
              faqImages[0].classList.add('visible');
          }
      });
  });
});

// No additional JS required for the small screen layout





// Select all containers with class 'container1'
let containers = document.querySelectorAll('.container1');

containers.forEach(container => {
    // Target the 'next' and 'prev' buttons and 'slide' inside each container
    let next = container.querySelector('.next');
    let prev = container.querySelector('.prev');
    let slide = container.querySelector('.slide');

    if (next && prev && slide) {
        // Function to get the appropriate width based on screen size
        const getWidth = () => {
            if (window.matchMedia('(max-width: 576px)').matches) {
                return 67; // 52vw for small screens
            } else if (window.matchMedia('(max-width: 768px)').matches) {
                return 52; // 42vw for medium screens (up to 768px)
            } else if (window.matchMedia('(max-width: 992px)').matches) {
                return 37; // 37vw for medium screens (up to 992px)
            } else {
                return 28; // 28vw for larger screens
            }
        };

        // Function to update the positions of items
        const updatePositions = () => {
            let items = slide.querySelectorAll('.itemc');
            let width = getWidth(); // Get the width dynamically
            items.forEach((item, index) => {
                // Calculate the position dynamically
                item.style.left = `${index * width}vw`;
                item.style.opacity = index < 2 ? '1' : '0'; // Show only the first 2 items
            });
        };

        // Initialize positions on page load
        updatePositions();

        // Add event listener for the 'next' button
        next.addEventListener('click', function () {
            let items = slide.querySelectorAll('.itemc');
            if (items.length > 0) {
                // Move the first item to the end of the slide
                slide.appendChild(items[0]);
                // Update positions
                updatePositions();
            }
        });

        // Add event listener for the 'prev' button
        prev.addEventListener('click', function () {
            let items = slide.querySelectorAll('.itemc');
            if (items.length > 0) {
                // Move the last item to the beginning of the slide
                slide.prepend(items[items.length - 1]);
                // Update positions
                updatePositions();
            }
        });

        // Update positions dynamically on window resize
        window.addEventListener('resize', updatePositions);
    }
});













document.addEventListener('DOMContentLoaded', () => {
  // Loop through each item with the class "item"
  document.querySelectorAll('.itemc').forEach(item => {
      const description = item.querySelector('.description');
      const readMoreButton = item.querySelector('.read-more');
      const readLessButton = item.querySelector('.read-less'); // Select the Read Less button

      if (description && readMoreButton && readLessButton) {
          // Check if the content overflows its container
          if (description.scrollHeight > description.clientHeight) {
            readMoreButton.classList.add('showmore');
            readLessButton.classList.add('showless'); // Initially hidden in CSS

            // Click event for the Read More button
            readMoreButton.addEventListener('click', () => {
              description.classList.add('expanded');
              item.classList.add('expanded1'); // For any additional styling
              readMoreButton.style.display = 'none'; // Hide Read More
              readLessButton.style.display = 'block'; // Show Read Less
            });

            // Click event for the Read Less button
            readLessButton.addEventListener('click', () => {
              console.log("c");
              description.classList.remove('expanded');
              item.classList.remove('expanded1'); // Reset any additional styling
              readMoreButton.style.display = 'block'; // Show Read More
              readLessButton.style.display = 'none'; // Hide Read Less
            });
          }
      }
  });
});








 document.addEventListener('DOMContentLoaded', () => {
   const itemDiv = document.querySelector('.item'); // Select the first item div
   const rate1 = document.querySelector('.rate1'); // Select the container1 div

   if (itemDiv && rate1) {
       const itemHeight = itemDiv.offsetHeight; // Get the height of the item div
       const marginTopValue = `calc(10vh + ${itemHeight}px)`; // Calculate the margin top
       rate1.style.marginTop = marginTopValue; // Apply the margin top to container1
   }
});





// // Select all containers with the class 'container1'
// let containers1 = document.querySelectorAll('.container1');

// containers1.forEach(container => {
//     // Target specific elements inside each container
//     const next = container.querySelector('.next');
//     const slide = container.querySelector('.slide');
//     const items = Array.from(slide.children);
//     let currentIndex = 0; // Track the current slide for each container

//     // Function to update the position of each item based on the current index
//     const updateItemPositions = () => {
//         const itemWidth = items[0].getBoundingClientRect().width;
//         const style = window.getComputedStyle(items[0]);
//         const marginRight = parseFloat(style.marginRight); // Get margin-right in pixels
//         const totalWidth = itemWidth + marginRight; // Calculate the combined width (width + margin)
//         slide.style.transform = `translateX(-${(totalWidth * currentIndex) -4}px)`;
//     };

//     // Move to the next item
//     next.addEventListener('click', () => {
//         currentIndex = (currentIndex + 1) % items.length; // Loop back to the first item if at the end
//         updateItemPositions();
//     });

//     // Initialize positions
//     updateItemPositions();
// });







document.addEventListener('DOMContentLoaded', () => {
  const slide = document.querySelector('.slide');
  const re = document.querySelector('.re');
  const buttons1 = document.querySelectorAll('.button1');
  const buttons2 = document.querySelectorAll('.button2');

  if (slide && re) {
      // Calculate combined height once
      const totalHeight = slide.offsetHeight + 0.2 * re.offsetHeight;
      
      // Set the top property for all button1 instances
      buttons1.forEach(button => {
          button.style.top = `${totalHeight}px`;
      });

      // Set the top property for all button2 instances
      buttons2.forEach(button => {
          button.style.top = `${totalHeight}px`;
      });
  }
});













document.addEventListener("DOMContentLoaded", () => {
  const navToggle = document.querySelector('.nav__toggle');
  const navClose = document.querySelector('.nav__close');

  navToggle.addEventListener('click', () => {
      navClose.style.display = 'block'; // Only sets display to 'block' once
  });
  navClose.addEventListener('click', () => {
    navClose.style.display = 'none';
});
});







document.addEventListener("DOMContentLoaded", () => {
  const navToggle = document.querySelector('.nav__toggle');
  const navClose = document.querySelector('.nav__close');
  const whiteLogo = document.querySelector('.whitelogo');
  const blackLogo = document.querySelector('.blacklogo');

  navToggle.addEventListener('click', () => {
      blackLogo.style.display = 'none';
      whiteLogo.style.display = 'block';
  });

  navClose.addEventListener('click', () => {
      blackLogo.style.display = 'block';
      whiteLogo.style.display = 'none';
  });
});










document.addEventListener('DOMContentLoaded', () => {
  const counters = document.querySelectorAll('.counter-numbers');
  let hasAnimated = false;

  // Function to animate numbers
  const animateCounters = () => {
    counters.forEach(counter => {
      const target = +counter.getAttribute('data-number'); // Get the target number
      let current = 0;
      const increment = target / 100; // Adjust this value to change the speed

      const updateCounter = () => {
        current += increment;
        if (current < target) {
          counter.textContent = `${Math.ceil(current)}+`;
          requestAnimationFrame(updateCounter); // Continue animating
        } else {
          counter.textContent = `${target}+`;
        }
      };
      updateCounter();
    });
  };

  // Use IntersectionObserver to trigger animation when the section comes into view
  const section = document.querySelector('.section-work-data');
  const observer = new IntersectionObserver(entries => {
    if (entries[0].isIntersecting && !hasAnimated) {
      animateCounters();
      hasAnimated = true; // Ensure the animation runs only once
    }
  }, {
    threshold: 0.1 // Trigger when 50% of the section is in view
  });

  observer.observe(section);
});







const animatableElements = document.querySelectorAll(".animatable");

window.addEventListener("scroll", function() {
  const offset = window.innerHeight * 0.2; // Calculate 20% of the viewport height
  
  animatableElements.forEach(function(element) {
    const rect = element.getBoundingClientRect();
    
    // Check if the element is within 20% from the top or bottom of the viewport
    if (rect.top < window.innerHeight - offset && rect.bottom > offset) {
      element.classList.add("animate");
    }
  });
});



const animatableElements1 = document.querySelectorAll(".animatable1");

// Function to check and add the class
function animateElements() {
  animatableElements1.forEach(function(element) {
    const rect1 = element.getBoundingClientRect();
    
    // Check if the element is partially visible in the viewport
    if (rect1.top < window.innerHeight && rect1.bottom > 0) {
      element.classList.add("animate1");
    }
  });
}

// Run the function on page load
document.addEventListener("DOMContentLoaded", animateElements);

// Run the function on scroll
window.addEventListener("scroll", animateElements);


